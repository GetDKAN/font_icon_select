<?php
// $Id: icon_select.module $

// Load all Field module hooks for Image.
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'icon_select') . '/icon_select.field.inc';

/*
 * implements hook_form_alter
 *
 * for debugging only - should be removed unless business logc is added
 */
function icon_select_form_alter(&$form, &$form_state, $form_id){
  //drupal_set_message('<pre>'.print_r($form_id, 1).'</pre>');
}

//help with the field edit form here
function icon_select_form_field_ui_field_edit_form_alter(&$form, &$form_state){
  if ($form['#field']['type'] == 'icon_select_icon'){
    //giving the default field fieldset attributes so it can collapse
    $form['instance']['default_value_widget']['#collapsible'] = TRUE;
    $form['instance']['default_value_widget']['#collapsed'] = TRUE;
    $form['instance']['default_value_widget']['#pre_render'][] = 'form_pre_render_fieldset';
    $form['instance']['default_value_widget']['#process'][] = 'form_process_fieldset';
  }
}

/*
 * implements hook_permission
 */
function icon_select_permission(){
  return array(
    'administer icon select settings' => array(
      'title' => t('Edit Icon Select Settings'),
    ),
  );
}

/*
 * implements hook_theme
 */
function icon_select_theme() {
  return array(
    'icon_select_checkboxes' => array('render element' => 'element'),

    'icon_select_checkbox' => array(
      'template' => 'icon_select_checkbox',
      'pattern' => 'icon_select_checkbox__',
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function icon_select_menu() {

  $items = array();

  $access_content = array('access content');

  $items['admin/config/content/icon_select_options'] = array(
    'title' => 'Icon Select Options',
    'description' => 'Icon Selection Font Library Options',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'icon_select_overview',
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
  );
  //default tab
  $items['admin/config/content/icon_select_options/overview'] = array(
    'title' => 'Uploaded Font Libraries',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/content/icon_select_options/add'] = array(
    'title' => 'Upload New Library',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_select_font_library_form', '0'),
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
  );

  //edit font library blacklist
  $items['admin/config/content/icon_select_options/%/global_blacklist'] = array(
    'title' => 'Global Blacklist Selection',
    'page arguments' => array('icon_select_font_global_blacklist_settings_form', 4),
    'page callback' => 'drupal_get_form',
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
    'type' => MENU_CALLBACK,
  );
  // 'Edit' link for libraries.
  $items['admin/config/content/icon_select_options/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_select_font_library_form', 4),
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
    'type' => MENU_CALLBACK,
  );
  //delete link for libraries.
  $items['admin/config/content/icon_select_options/%/delete'] = array(
    'title' => 'Delete Library',
    'type' => MENU_CALLBACK,
    'page callback' => 'icon_select_font_library_delete',
    'page arguments' => array(4),
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
  );

  return $items;
}

/**
 * Implements hook_field_schema().
 */
function icon_select_field_schema($field) {
  $columns = array(
    'value' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    ),
  );
  //dont need the optional indexes or foreign keys
  return array('columns' => $columns);
}

/*
 * Ajax callback for listing type taxonomy term dropdown
 *
 * populates the font blacklist options with appropriate font items
 */
function _icon_select_font_options_ajax($form, $form_state){
  //drupal_rebuild_form
  //$form = drupal_rebuild_form('listing_node_form', $form_state, $form);
  //return $form['font_blacklist'];//$form['field_listing_type'];//$fields;
  return print_r($form, 1);
}


/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'bad_icon': icon value is not present in the font file).
 */
/* * /
function icon_select_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 */
function icon_select_field_is_empty($item, $field) {
  //drupal_set_message('in the hook_field_is_empty function');
  return empty($item['value']);
}

/**
 * Implements hook_field_widget_error().
 */
/* * /
function icon_select_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}
/* */

/**
 * Implements hook_options_list().
 */
function icon_select_options_list($field, $instance, $entity_type, $entity) {
/* * /
  drupal_set_message('<pre>'.print_r($entity_type, 1).'</pre>');
  drupal_set_message('<pre>'.print_r($entity, 1).'</pre>');
  drupal_set_message('in hook options list');
/* */
  //need to pull the icons here...
  module_load_include('inc', 'icon_select', 'icon_select.admin');

  $available_fonts = _icon_select_get_available_fonts();
  $options = _icon_select_get_font_icons($field['settings']['font'], TRUE);

  //if this is an entity, restrict the options based on the field instance settings
  if ($entity == NULL || $entity == '') return $options;

  //drupal_set_message('<pre>'.print_r($instance, 1).'</pre>');
  if ($instance['settings']['blacklist_fieldset']['blacklist'] == '0'){
    $options = array();
    foreach( $instance['settings']['blacklist_fieldset']['suppress'] as $key => $value) $options[$value] = '&#' . $value . ';';
    return $options;
  }
  //set it up for the array diff
  foreach( $instance['settings']['blacklist_fieldset']['suppress'] as $key => $value) $instance['settings']['blacklist_fieldset']['suppress'][$key] = '&#' . $value . ';';

  return array_diff($options, $instance['settings']['blacklist_fieldset']['suppress']);
}

/*
 * implements hook_preprocess_html
 */
function icon_select_preprocess_html($vars){
  $module_path = drupal_get_path('module', 'icon_select');
  module_load_include('inc', 'icon_select', 'icon_select.admin');
  $available_fonts = _icon_select_get_available_fonts();
  $css_to_print = '';
  foreach ($available_fonts as $key => $value){
    //this file is generated on save of the fonts in the _icon_select_generate_general_css function located in icon_select.admin.inc
    drupal_add_css('public://icon-select-general-generated-' . $key . '.css', array('type' => 'file', 'preprocess' => TRUE));
  }
}

/**
 * Implements hook_entity_info().
 */
function icon_select_entity_info() {
  return array(
    'icon_select_font_library' => array(
      'label' => t('Font Library'),
      'controller class' => 'IconSelectControllerClass',
      'base table' => 'icon_select',
      'entity keys' => array(
        'id' => 'flid',
      ),
    ),
  );
}

interface IconSelectBasicControllerInterface
  extends DrupalEntityControllerInterface {
  public function create();
  public function save($entity);
  public function delete($entity);
}

/**
 * IconSelectControllerClass extends DrupalDefaultEntityController.
 */
class IconSelectControllerClass
  extends DrupalDefaultEntityController
  implements IconSelectBasicControllerInterface {

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'icon_select_font_library';
    $entity->flid = 0;
    $entity->font_title = '';
    $entity->settings = '';
    $entity->eot_fid = 0;
    $entity->svg_fid = 0;
    $entity->ttf_fid = 0;
    $entity->woff_fid = 0;

    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record()
   */
  public function save($entity) {
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'icon_select_font_library');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->flid ? 'flid' : array();
    // Write out the entity record.
    drupal_write_record('icon_select', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (empty($primary_keys)) {
      field_attach_insert('icon_select_font_library', $entity);
    }
    else {
      field_attach_update('icon_select_font_library', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'icon_select_font_library');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for delete_multiple().
   */
  public function delete($entity) {
    $this->delete_multiple(array($entity));
  }

  /**
   * Delete one or more entity_example_basic entities.
   *
   * @param $entities
   *   An array of entity IDs or a single numeric ID.
   */
  public function delete_multiple($entities) {
    $flids = $fids = array();
    $font_files = array('eot','svg', 'ttf', 'woff');
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'icon_select_font_library');
          //no need to delete fields, as this is not fieldable
          //field_attach_delete('icon_select_font_library', $entity);
          $flids[] = $entity->flid;
          //grab the files to be deleted
          foreach($font_files as $id => $ext) $fids[] = $entity->{$ext.'_fid'};
        }
        db_delete('icon_select')
          ->condition('flid', $flids, 'IN')
          ->execute();
        //delete the files
        foreach($fids as $id => $fid){
          $file = file_load($fid);
          file_usage_delete($file, 'icon_select');
          file_delete($file);
        }
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('icon_select', $e);
        throw $e;
      }
    }
  }
}