<?php
// $Id: icon_select.module $

/*
 * implements hook_form_alter
 *
 * for debugging only - should be removed unless business logc is added
 */
function icon_select_form_alter(&$form, &$form_state, $form_id){
	//drupal_set_message('<pre>'.print_r($form_id, 1).'</pre>');
}

//help with the field edit form here
function icon_select_form_field_ui_field_edit_form_alter(&$form, &$form_state){
	if ($form['#field']['type'] == 'icon_select_icon'){
		//giving the default field fieldset attributes so it can collapse
		$form['instance']['default_value_widget']['#collapsible'] = TRUE;
		$form['instance']['default_value_widget']['#collapsed'] = TRUE;
		$form['instance']['default_value_widget']['#pre_render'][] = 'form_pre_render_fieldset';
		$form['instance']['default_value_widget']['#process'][] = 'form_process_fieldset';
	}
}

/*
 * implements hook_permission
 */
function icon_select_permission(){
  return array(
    'administer icon select settings' => array(
      'title' => t('Edit Icon Select Settings'),
    ),
  );
}

/*
 * implements hook_theme
 */
function icon_select_theme() {
  return array(
    'icon_select_checkboxes' => array('render element' => 'element'),

    'icon_select_checkbox' => array(
      'template' => 'icon_select_checkbox',
      'pattern' => 'icon_select_checkbox__',
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function icon_select_menu() {

  $items = array();

  $access_content = array('access content');

  $items['admin/config/media/icon_select_options'] = array(
    'title' => 'Icon Select Options',
    'description' => 'Icon Selection Font Library Options',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'icon_select_overview',
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
  );
  //default tab
  $items['admin/config/media/icon_select_options/overview'] = array(
    'title' => 'Uploaded Font Libraries',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/media/icon_select_options/add'] = array(
    'title' => 'Upload New Library',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_select_font_library_form', '0'),
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
  );

  //edit font library blacklist
  $items['admin/config/media/icon_select_options/%/global_blacklist'] = array(
    'title' => 'Global Blacklist Selection',
    'page arguments' => array('icon_select_font_global_blacklist_settings_form', 4),
    'page callback' => 'drupal_get_form',
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
    'type' => MENU_CALLBACK,
  );
  // 'Edit' link for libraries.
  $items['admin/config/media/icon_select_options/%/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icon_select_font_library_form', 4),
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
    'type' => MENU_CALLBACK,
  );
  //delete link for libraries.
  $items['admin/config/media/icon_select_options/%/delete'] = array(
    'title' => 'Delete Library',
    'type' => MENU_CALLBACK,
    'page callback' => 'icon_select_font_library_delete',
    'page arguments' => array(4),
    'file' => 'icon_select.admin.inc',
    'access arguments' => array('administer icon select settings'),
  );

  return $items;
}

/**
 * Implements hook_field_info().
 */
function icon_select_field_info() {
  return array(
    'icon_select_icon' => array(
      'label'             => t('Icon Selection'),
      'description'       => t('This field stores the html value of the selected icon.'),
      'settings'          => array(
        'max_length' => 255,
        'font' => '',
        'font_blacklist' => '',
      ),
      'default_widget'    => 'icon_select_icon_widget',
      'default_formatter' => 'icon_select_icon_default_formatter',
/* * /
      // Support hook_entity_property_info() from contrib "Entity API".
      //'property_type' => 'node',
/* */
      // Support default token formatter for field tokens.
      'default_token_formatter' => 'icon_select_plain',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function icon_select_field_schema($field) {
  $columns = array(
    'value' => array(
      'type' => 'varchar',
      'length' => 255,
      'not null' => FALSE,
    ),
  );
  //dont need the optional indexes or foreign keys
  return array('columns' => $columns);
}

/**
 * Implements hook_field_settings_form().
 */
function icon_select_field_settings_form($field, $instance, $has_data) {
  //drupal_set_message('in icon_select_field_settings_form');
  $settings = $field['settings'];

  $form = array();

  module_load_include('inc', 'icon_select', 'icon_select.admin');

  $form['font'] = array(
    '#type' => 'select',
    '#title' => t('Font'),
    '#default_value' => $settings['font'],
    '#options' => _icon_select_get_available_fonts(),
    '#required' => TRUE,
    '#description' => t('The font to use.'),
    '#disabled' => $has_data,
    '#ajax' => array(
      'callback' => '_icon_select_font_options_ajax',
      'wrapper' => 'ajax-target',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );

/* * /
	//not doing this here, do it on a field occurrence basis.
  //don't show the blacklist unless there is a font selected
  $form['font_blacklist'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select Icons that should not be available to the user.'),
    '#options' => array(),
    '#attributes' => array(
      'class' => array('icon_select_options', 'blacklist'),
    ),
    '#theme' => 'icon_select_checkboxes',
    '#prefix' => '<div class="ajax-target"></div>',
    '#suffix' => '</div>',
  );
/* */

  //drupal_set_message('<pre>'.print_r($settings, 1).'</pre>');

  return $form;
}

/*
 * Ajax callback for listing type taxonomy term dropdown
 *
 * populates the font blacklist options with appropriate font items
 */
function _icon_select_font_options_ajax($form, $form_state){
  //drupal_rebuild_form
  //$form = drupal_rebuild_form('listing_node_form', $form_state, $form);
  //return $form['font_blacklist'];//$form['field_listing_type'];//$fields;
  return print_r($form, 1);
}


/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'bad_icon': icon value is not present in the font file).
 */
/* * /
function icon_select_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/*
 * Implements hook_field_prepare_view().
 */
function icon_select_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items) {
  $ids = array();
  foreach ($items as $id => $entity_items) {
    foreach ($entity_items as $delta => $item) {
      if (is_array($item)) {
        // Default to 'accessible'.
        $items[$id][$delta]['access'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function icon_select_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $result = array();

  $module_path = drupal_get_path('module', 'icon_select');
  //need to find the font name
  module_load_include('inc', 'icon_select', 'icon_select.admin');
  $available_fonts = _icon_select_get_available_fonts();
  $font_name = $available_fonts[$field['settings']['font']];

  switch ($display['type']) {
    case 'icon_select_icon_default_formatter':
      foreach ($items as $delta => $item) {
        if ($item['access']) {
          $result[$delta] = array(
            '#markup' => drupal_html_to_text(check_plain('&#'.$item['value'].';')),
            '#prefix' => '<span class="icon_select_'.$field['settings']['font'].'">',
            '#suffix' => '</span>',
          );
        }
      }
      break;
  }//end case

  return $result;
}

/**
 * Implements hook_field_is_empty().
 */
function icon_select_field_is_empty($item, $field) {
  //drupal_set_message('in the hook_field_is_empty function');
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 */
function icon_select_field_formatter_info() {
  $ret = array(
    'icon_select_icon_default_formatter' => array(
      'label' => t('default'),
      'description' => t('Output unencoded icon.'),
      'field types' => array('icon_select_icon'),
    ),
  );
  return $ret;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function icon_select_field_formatter_settings_summary($field, $instance, $view_mode) {
  //returning an empty value suppresses the formatter settings form
  return;
}

/**
 * Implements hook_field_widget_info().
 */
function icon_select_field_widget_info() {
  //drupal_set_message('in icon_select_field_widget_info');
  return array(
    'icon_select_icon_widget' => array(
      'label' => t('Icon Selection check boxes/radio buttons'),
      'field types' => array('icon_select_icon'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function icon_select_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  //drupal_set_message('inside icon_select_field_widget_form');

  switch ($instance['widget']['type']) {

    case 'icon_select_icon_widget':

      //drupal_set_message('<pre>'.print_r($items, 1).'</pre>');

      $module_path = drupal_get_path('module', 'icon_select');
      //need to find the font name
      module_load_include('inc', 'icon_select', 'icon_select.admin');
      $available_fonts = _icon_select_get_available_fonts();
      $font_name = $available_fonts[$field['settings']['font']];

      $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;

      //need to use an array if this field allows multiple values
      if ($multiple) {
        $defaults = array();
        foreach($items as $key => $value)$defaults[$key] = $value['value'];
      }
      else $defaults = isset($items[$delta]) ? $items[$delta]['value'] : '';

      //pull the font entity info here
      $entity = entity_load('icon_select_font_library', array($field['settings']['font']));
      $entity = array_shift($entity);
      //get the font file info here
      $files = file_load_multiple(array($entity->eot_fid, $entity->svg_fid, $entity->ttf_fid, $entity->woff_fid));

      $module_path = drupal_get_path('module', 'icon_select');

      $element += array(
        '#attributes' => array('class' => array('icon_select_options', 'whitelist')),
        '#attached' => array(
          'js' => array(
            $module_path . '/icon_select.js',
            array(
              'data' => array('icon_select' => array( 'cardinality' => ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED ? 0 : $field['cardinality']))),
              'type' => 'setting'
            ),
          ),
          'css' => array(
            $module_path . '/icon_select.css',
            array(
              'type' => 'inline',
              'data' => "
                @font-face {
                  font-family: 'icon_select_current_font';
                  src: url('".file_create_url($files[$entity->eot_fid]->uri)."');
                  src: url('".file_create_url($files[$entity->eot_fid]->uri)."?#iefix') format('embedded-opentype'), url('".file_create_url($files[$entity->woff_fid]->uri)."') format('woff'), url('".file_create_url($files[$entity->ttf_fid]->uri)."') format('truetype'), url('".file_create_url($files[$entity->svg_fid]->uri)."') format('svg');
                  font-weight: normal;
                  font-style: normal;
                }
              ",
            ),
          ),
        ),
        '#type' => $multiple ? 'checkboxes' : 'radios',
        '#value_key' => 'value',
        '#default_value' => $defaults,
        //there has to be a better way to do this...
        '#options' => (array) module_invoke($field['module'], 'options_list', $field, $defaults),
        // @TODO - add element validation
        '#element_validate' => array('options_field_widget_validate'),
        '#properties' => array(
          'filter_xss' => 1,
          'empty_option' => 'option_none',
          'strip_tags' => '',
          'optgroups' => '',
        )
      );
      break;
  }

  //drupal_set_message('<pre>'.print_r($element, 1).'</pre>');

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
/* * /
function icon_select_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}
/* */

/**
 * Implements hook_options_list().
 */
function icon_select_options_list($field, $defaults) {
  //drupal_set_message('in hook options list');
  //need to pull the icons here...
  module_load_include('inc', 'icon_select', 'icon_select.admin');

  $available_fonts = _icon_select_get_available_fonts();
  $options = _icon_select_get_font_icons($field['settings']['font'], TRUE);

  //drupal_set_message('<pre>'.print_r($defaults, 1).'</pre>');

  foreach ($options as $key => &$value){
    $value = '
      <div class="selectionOuter">
        <div class="selectionInner'.($key == $defaults || (is_array($defaults) && in_array($key, $defaults)) ? ' checked' : '').'">
          <div class="selection">'.$value.'</div>
        </div>
      </div>
      <div class="label hide">'.$key.'</div>
    ';
  }

  return $options;
}

function icon_select_field_widget_form_alter(&$element, &$form_state, $context){
  //drupal_set_message('<pre>'.print_r($element, 1).'</pre>');
}

/*
 * implements hook_preprocess_html
 */
function icon_select_preprocess_html($vars){
  $module_path = drupal_get_path('module', 'icon_select');
  module_load_include('inc', 'icon_select', 'icon_select.admin');
  $available_fonts = _icon_select_get_available_fonts();
  $css_to_print = '';
  foreach ($available_fonts as $key => $value){
    $entity = entity_load('icon_select_font_library', array($key));
    $entity = array_shift($entity);
    //get the font file info here
    $files = file_load_multiple(array($entity->eot_fid, $entity->svg_fid, $entity->ttf_fid, $entity->woff_fid));

    $css_to_print .= "
      @font-face {
        font-family: 'icon_select_".$key."';
        src: url('".file_create_url($files[$entity->eot_fid]->uri)."');
        src: url('".file_create_url($files[$entity->eot_fid]->uri)."?#iefix') format('embedded-opentype'), url('".file_create_url($files[$entity->woff_fid]->uri)."') format('woff'), url('".file_create_url($files[$entity->ttf_fid]->uri)."') format('truetype'), url('".file_create_url($files[$entity->svg_fid]->uri)."') format('svg');
        font-weight: normal;
        font-style: normal;
      }
      span.icon_select_".$key."{font-family: 'icon_select_".$key."';}
    ";
  }
  drupal_add_css($css_to_print, array('type' => 'inline', 'preprocess' => TRUE));
}

/**
 * Implements hook_entity_info().
 */
function icon_select_entity_info() {
  return array(
    'icon_select_font_library' => array(
      'label' => t('Font Library'),
      'controller class' => 'IconSelectControllerClass',
      'base table' => 'icon_select',
      'entity keys' => array(
        'id' => 'flid',
      ),
    ),
  );
}

interface IconSelectBasicControllerInterface
  extends DrupalEntityControllerInterface {
  public function create();
  public function save($entity);
  public function delete($entity);
}

/**
 * IconSelectControllerClass extends DrupalDefaultEntityController.
 */
class IconSelectControllerClass
  extends DrupalDefaultEntityController
  implements IconSelectBasicControllerInterface {

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'icon_select_font_library';
    $entity->flid = 0;
    $entity->font_title = '';
    $entity->settings = '';
    $entity->eot_fid = 0;
    $entity->svg_fid = 0;
    $entity->ttf_fid = 0;
    $entity->woff_fid = 0;

    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record()
   */
  public function save($entity) {
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'icon_select_font_library');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->flid ? 'flid' : array();
    // Write out the entity record.
    drupal_write_record('icon_select', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (empty($primary_keys)) {
      field_attach_insert('icon_select_font_library', $entity);
    }
    else {
      field_attach_update('icon_select_font_library', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'icon_select_font_library');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for delete_multiple().
   */
  public function delete($entity) {
    $this->delete_multiple(array($entity));
  }

  /**
   * Delete one or more entity_example_basic entities.
   *
   * @param $entities
   *   An array of entity IDs or a single numeric ID.
   */
  public function delete_multiple($entities) {
    $flids = $fids = array();
    $font_files = array('eot','svg', 'ttf', 'woff');
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'icon_select_font_library');
          //no need to delete fields, as this is not fieldable
          //field_attach_delete('icon_select_font_library', $entity);
          $flids[] = $entity->flid;
          //grab the files to be deleted
          foreach($font_files as $id => $ext) $fids[] = $entity->{$ext.'_fid'};
        }
        db_delete('icon_select')
          ->condition('flid', $flids, 'IN')
          ->execute();
        //delete the files
        foreach($fids as $id => $fid){
          $file = file_load($fid);
          file_usage_delete($file, 'icon_select');
          file_delete($file);
        }
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('icon_select', $e);
        throw $e;
      }
    }
  }
}